.. _tsmap:

TS Map
======

fermipy provides two methods for generating TS maps of the region of
interest.  The :ref:`residmap`

that can be used
to look for unmodeled sources as well as evaluate the fit quality of
the model.  These methods are

* :ref:`tsmap`: :py:meth:`~fermipy.gtanalysis.GTAnalysis.tsmap` generates a test
  statistic (TS) map for a new source centered at each spatial bin in
  the ROI.





:py:meth:`~fermipy.gtanalysis.GTAnalysis.tsmap` performs a likelihood
ratio test for an additional source at the center of each spatial bin
of the ROI.  The methodology is similar to that of the `gttsmap` ST
application but speeds up the calculation by limiting the evaluation of the 

.  :ref:`tscube` is a closely related method 

For each spatial bin the method calculates the maximum likelihood test
statistic given by

.. math::

   \mathrm{TS} = 2 \sum_{k} \ln L(\mu,\theta|n_{k}) - \ln L(0,\theta|n_{k})

where the summation index *k* runs over both spatial and energy bins,
μ is the test source normalization parameter, and θ represents the
parameters of the background model.  The likelihood fitting
implementation used by :py:meth:`~fermipy.gtanalysis.GTAnalysis.tsmap`
only fits the normalization of the test source and does not re-fit
parameters of the background model.

The properties of the test source (spectrum and spatial morphology)
are controlled with the `model` dictionary argument.  The syntax for
defining the test source properties follows the same conventions as
:py:meth:`~fermipy.gtanalysis.GTAnalysis.add_source` as illustrated in
the following examples.

.. code-block:: python
   
   # Generate TS map for a power-law point source with Index=2.0
   model = {'Index' : 2.0, 'SpatialModel' : 'PointSource'}
   maps = gta.tsmap('fit1',model=model)

   # Generate TS map for a power-law point source with Index=2.0 and
   # restricting the analysis to E > 3.16 GeV
   model = {'Index' : 2.0, 'SpatialModel' : 'PointSource'}
   maps = gta.tsmap('fit1_emin35',model=model,erange=[3.5,None])

   # Generate TS maps for a power-law point source with Index=1.5, 2.0, and 2.5
   model={'SpatialModel' : 'PointSource'}
   maps = []
   for index in [1.5,2.0,2.5]:
       model['Index'] = index
       maps += [gta.tsmap('fit1',model=model)]

If running interactively, the `multithread` option can be enabled to
split the calculation across all available cores.  However it is not
recommended to use this option when running in a cluster environment.
       
.. code-block:: python
                
   >>> maps = gta.tsmap('fit1',model=model,multithread=True)
       
:py:meth:`~fermipy.gtanalysis.GTAnalysis.tsmap` returns a `maps`
dictionary containing `~fermipy.utils.Map` representations of the TS
and NPred of the best-fit test source at each position.

.. code-block:: python
   
   >>> model = {'Index' : 2.0, 'SpatialModel' : 'PointSource'}
   >>> maps = gta.tsmap('fit1',model=model)
   >>> print(maps.keys())
   [u'file', u'name', u'sqrt_ts', u'ts', u'src_dict', u'npred', u'amplitude']

The contents of the output dictionary are described in the following table.

============= ====================== =================================================================
Key           Type                   Description
============= ====================== =================================================================
amplitude     `~fermipy.utils.Map`   Best-fit test source amplitude
                                     expressed in terms of the spectral prefactor.
npred         `~fermipy.utils.Map`   Best-fit test source amplitude
                                     expressed in terms of the total model counts (Npred).
ts            `~fermipy.utils.Map`   Test source TS (twice the logLike difference between null and
	                             alternate hypothese).
sqrt_ts       `~fermipy.utils.Map`   Square-root of the test source TS.
file          str                    Path to a FITS file containing the maps (TS, etc.) generated by
                                     this method. 
src_dict      dict                   Dictionary defining the properties of the test source.
============= ====================== =================================================================

Maps are also written as both FITS and rendered image files to the
analysis working directory.  All output files are prepended with the
`prefix` argument.  Sample images for `sqrt_ts` and `npred` generated
by :py:meth:`~fermipy.gtanalysis.GTAnalysis.tsmap` are shown below.  A
colormap threshold for the `sqrt_ts` image is applied at 5 sigma with
iscontours at 2 sigma intervals (3,5,7,9, ...) indicating values above
this threshold.

.. |image0| image:: tsmap_sqrt_ts.png
   :width: 100%
   
.. |image1| image:: tsmap_npred.png
   :width: 100%

+---------------------------------+---------------------------------+
| Sqrt(TS)                        | NPred                           |
+=================================+=================================+
| |image0|                        | |image1|                        |
+---------------------------------+---------------------------------+

Reference/API
-------------

.. automethod:: fermipy.gtanalysis.GTAnalysis.tsmap
   :noindex:


